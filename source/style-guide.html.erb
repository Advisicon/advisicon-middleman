---
title: Style Guide
keywords:
tickets:
-
  type:   General Admission + Afterparty
  sku:    gen_admin_and_party
  price:  50
-
  type:   General Admission
  sku:    gen_admin
  price:  40

---

<div class="row">

  <h1>Forms</h1>
  <form action="#" id="" class="training form" role="form">
    <legend>Form Controls</legend>

    <!-- EXAMPLE: help text -->
    <p>
      Paragraphs within forms are for helpful text. Assist the users, but
      don't overwhelm them!
    </p> 

    <!-- EXAMPLE: checkboxes -->
    <fieldset>
      <label>Checkbox</label>
      <div class="checkbox">
        <label>
          <input type="checkbox" name="optionsCheckbox" value="option1">
          Option one is this and that&ndash;be sure to include why it's great
        </label>
      </div>
      <div class="checkbox">
        <label>
          <input type="checkbox" name="optionsCheckbox" value="option2">
          Option two is that and this
        </label>
      </div>
    </fieldset>

    <!-- EXAMPLE: radio buttons -->
    <fieldset class="radio-group">
      <label>Radio buttons</label>
      <label class="radio">
        <input type="radio" name="radioOption" id="radioOption" value="1">
        Option one
      </label>
      <label class="radio">
        <input type="radio" name="radioOption" id="radioOption" value="2">
        Option two
      </label>
    </fieldset>

    <!-- EXAMPLE: text inputs -->
    <fieldset>
      <label for="textInput">Text input</label>
      <input type="text" id="textInput" name="textInput" class="form-control">
    </fieldset>

    <fieldset>
      <label for="textInputRequired">Required text input</label>
      <input type="text" id="textInputRequired" name="textInputRequied" class="form-control" required>
    </fieldset>

    <fieldset>
      <label for="textInputPlaceholder">Placeholder in text input</label>
      <input type="text" id="textInputPlaceholder" name="textInputPlaceholder" class="form-control" placeholder="This is placeholder text">
      <p>
        Placeholder text disapears when the users begins to type in the 
        input field.
      </p>
    </fieldset>

    <!-- EXAMPLE: selection lists -->
    <fieldset>
      <label for="selectList">Selection list</label>
      <select id="selectList" name="selectList">
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
      </select>
    </fieldset>

    <fieldset>
      <label for="selectListHTML5">Selection list with user entry option</label>
      <input type="text" name="selectListHTML5" list="optionsDatalist">
      <datalist id="optionsDatalist">
        <option value="1">One</option>
        <option value="2">Two</option>
        <option value="3">Three</option>
        <option value="4">Four</option>
      </datalist>
    </fieldset>

    <!-- EXAMPLE: textarea -->
    <fieldset>
      <label for="textArea">Long form text</label>
      <textarea id="textArea" rows="10" maxlength="2000" placeholder="Write something here" required></textarea>
    </fieldset>

    <!-- EXAMPLE: url input -->
    <fieldset>
      <label for="urlInput">Some URL</label>
      <input type="url" id="urlInput" placeholder="http://example.com (optional)">
    </fieldset>

    <!-- EXAMPLE: file upload -->
    <fieldset>
      <label for="fileUpload">Upload a file</label>
      <input type="file" id="fileUpload">
    </fieldset>

    <!-- EXAMPLE: submit -->
    <button type="submit">OK!</button>

  </form>
  
  <form action="/" id="" class="training form" role="form">
    <h2>Form Widgets</h2>
    <p>There are larger form patterns that will repeat. Find them here.</p>
    <h3>Tickets/Products</h3>

    <h3>Contact Info</h3>
    <p>
      Use this to gather information about purchaser identity, newsletter
      registration, and the like.
    </p>
    <%= partial("/partial/form/contact_info", locals: { contact: "buyer" }) %>
    <h3>Credit Card Info</h3>
    <p>
      Gathering credit card information (in order to process it for purchases) is a regular occurance.
    </p>
    <%= partial "partial/form/card_info" %>
    <div id="recipient-info">
      <h4>Shipping Destination</h4>
      <p>If the something needs to get shipped as a result of a purchase, assume that the shipping destination is the same as the billing address and don't require shipping address entry. However, we still need to allow a shipping address that differs from the billing address.</p>
      <%= partial "/partial/form/shipping_matches_billing_test" %>
      <%= partial("/partial/form/address", locals: { address_type: "shipping" }) %>
    </div>
  </form>

  <section class="main-content">
    <h1>Icon &amp; Small Image Featurettes</h1>

    <!-- EXAMPLE: Icon Featurettes -->
    <%= partial(:icon_featurette, 
                locals: { icon: lorem.image('200'), 
                  destination: "#", 
                  heading: "Awesome Statement.", 
                  byline: "Attention-grabbing byline pulls them in.", 
                  lead: "#{lorem.sentences((3..6).to_a.sample)}.", 
                  cta: "Call to action" }) %>
    <%= partial(:icon_featurette, 
                locals: { icon: lorem.image('200'), 
                  destination: "#", 
                  heading: "Images alternate sides.", 
                  byline: "Even ones go on the left.", 
                  lead: "#{lorem.sentences((3..6).to_a.sample)}.", 
                  cta: lorem.words(2).capitalize }) %>
    <%= partial(:icon_featurette, 
                locals: { icon: lorem.image('200'), 
                  destination: "#", 
                  heading: "The third featurette.", 
                  byline: "Images in odd featurettes go on the right.", 
                  lead: "#{lorem.sentences((3..6).to_a.sample)}.", 
                  cta: lorem.words(2).capitalize }) %>
  </section>

  <section class="main-content">
    <h1>Impact Featurettes</h1>

    <%= partial(:image_impact_featurette,
                locals: { img: lorem.image('600'), 
                  destination: "#", 
                  heading: "Stand out with impact featurettes.", 
                  lead: "#{lorem.paragraph}.", 
                  cta: lorem.words(3).capitalize }) %>

    <%= partial(:video_impact_featurette, 
                locals: { placeholder: "placeholder4.png", 
                  mp4: "placeholder4.mp4", 
                  heading: "Bring your content alive with videos.", 
                  lead: "#{lorem.paragraph}.", 
                  cta: lorem.words(3).capitalize, 
                  destination: "#" }) %>
  </section>

  <section class="secondary-content">
    <%= partial(:background_video_featurette, 
                locals: { placeholder: "placeholder3.png", 
                  mp4: "placeholder3.mp4", 
                  heading: "Use subtle background video to support your content.", 
                  lead: "#{lorem.sentences((6..24).to_a.sample)}.",
                  lead_position: "",
                  cta: lorem.words(3).capitalize, 
                  destination: "#" }) %>
    <%= partial(:background_video_featurette, 
                locals: { placeholder: "placeholder.png", 
                  mp4: "placeholder.mp4", 
                  heading: "You can switch the position of the background video content from left to right.", 
                  lead: "The call to action can have a hook applied. In this case, the hook is \"sample.\"\n\n#{lorem.sentences((6..24).to_a.sample)}.",
                  lead_position: "right",
                  cta: { text: lorem.words(3).capitalize, hook: "sample" }, 
                  destination: "#" }) %>
  </section>

  <section class="data-display" id="first-dataset">
    <h1>Data Display</h1>
    <div class="chart"></div>
    <style>
      path { 
        fill: none;
      }
      .employee .line { 
        stroke-opacity: 0.125;
        stroke-width: 2;
        -webkit-transition: all .25s ease-in-out;
        -moz-transition: all .25s ease-in-out;
        -o-transition: all .25s ease-in-out;
        transition: all .25s ease-in-out;
      }
      .employee .line:hover,
      .employee .line.toggled { 
        stroke-opacity: 1; 
        stroke-width: 3; 
        font-size: 1.125em;
        font-weight: bold;
      }
      .axis path,
      .axis line {
        fill: none;
        stroke: #ccc;
        stroke-width: 1;
        shape-rendering: crispEdges;
      }
      .x.axis path { display: none; }
      .axis text { fill: #ccc; }
      .overtime { 
        fill: #fdd;
        fill: rgba(255,0,0,.0625);
      }
      .data-toggle button {
        margin-bottom: 1em;
        -webkit-transition: all .25s ease-in-out;
        -moz-transition: all .25s ease-in-out;
        -o-transition: all .25s ease-in-out;
        transition: all .25s ease-in-out;
      }
    </style>
    <script type="text/javascript">

      var margin = {top: 30, right: 50, bottom: 30, left: 50},
          width = $(".data-display .chart").width() - margin.left - margin.right,
          height = 400 - margin.top - margin.bottom;

      var parseDate = d3.time.format('%Y-%m-%d').parse;

      var x = d3.time.scale()
        .range([0, width]);

      var y = d3.scale.linear()
        .range([height, 0]);

      var color = d3.scale.category20b();

      var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom").ticks(5);

      var yAxis = d3.svg.axis()
        .scale(y)
        .orient("left");

      var line = d3.svg.line()
        .interpolate("basis")
        .x(function(d) { return x( d.date ); })
        .y(function(d) { return y( d.hours ); });

      var svg = d3.select("#first-dataset .chart")
        .append("svg")
          .attr("class", "graph")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
        .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      // Get the data
      d3.tsv("/data/hours.tsv", function(error, data) {
        color.domain(d3.keys(data[0]).filter(function(key) {
          return key !== "date";
        }));

        data.forEach(function(d) {
          d.date = parseDate(d.date);
        });

        var employees = color.domain().map(function(name) {
          return {
            name: name,
            values: data.map(function(d) {
              return {
                date:  d.date, 
                hours: +d[name]
              };
            })
          };
        });

        // Scale the range of the data
        x.domain(d3.extent(data, function(d) { return d.date; }));

        y.domain([
          0,
          d3.max(employees, function(e) {
            return d3.max(e.values, function(v) { 
              return v.hours; 
            });
          })
        ]);

        // Add the overtime box
        svg.append("rect")
          .attr("x", 0)
          .attr("y", 0)
          .attr("width", width)
          .attr("height", y(40))
          .attr("class", "overtime");

        svg.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height + ")")
          .call(xAxis);

        svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
          .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("x", -3)
            .attr("dy", ".71em")
            .style("text-anchor", "end")
            .text("Hours Worked this Week");

        var employee = svg.selectAll(".employee")
            .data(employees)
          .enter().append("g")
            .attr("class", "employee");

        // Add the valueline paths
        employee.append("path")
          .attr("id", function(d) { 
            return "line-" + (d.name).replace(/\s+/g, "-").replace(/\.+/g, "").toLowerCase(); 
          })
          .attr("class", "line")
          .attr("d", function(d) { return line(d.values); })
          .attr("stroke", function(d) { return color(d.name); });

        // highlight data & button on button click
        employee
          .on("click", function(d) {
          var tggldBtn = "#toggle-" + (d.name).replace(/\s+/g, "-").replace(/\.+/g, "").toLowerCase(); 
          // determine if active
          var active = tggldBtn.active ? false : true,
          newColor = active ? function(d) {return color( d.name )} : null,
          lineState = active ? true : false; 
          // color the border & text or don't
          d3.select(tggldBtn)
            .style("font-weight", active ? "bold" : null)
            .style("border-color", newColor)
            .style("color", newColor);
          // update opacity of line element
          d3.select(this).classed("toggled", lineState);
          // update element state
          tggldBtn.active = active;
        })
        .on("mouseover", function(d) {
          var tggldBtn = "#toggle-" + (d.name).replace(/\s+/g, "-").replace(/\.+/g, "").toLowerCase(); 
          var newColor = function(d) {return color( d.name )};
          // color the border & text or don't
          d3.select(tggldBtn)
            .style("font-weight", "bold")
            .style("border-color", newColor)
            .style("color", newColor);
          // update opacity of line element
          d3.select(this).classed("toggled", true);
        })
        .on("mouseout", function(d) {
          var tggldBtn = "#toggle-" + (d.name).replace(/\s+/g, "-").replace(/\.+/g, "").toLowerCase(); 
          if (!tggldBtn.active) {
            d3.select(tggldBtn)
              .style("font-weight", null)
              .style("border-color", null)
              .style("color", null);
            // update opacity of line element
            d3.select(this).classed("toggled", false);
          }
        });
        //
        // Add toggle container
        var toggles = d3.select("#first-dataset .chart").selectAll(".data-toggle")
            .data(employees)
          .enter().append("div")
          .attr("class", "data-toggle col-sm-3 col-xs-6");

        // Add toggle button
        var toggle = toggles.append("button")
            .datum(function(d) {
              return {name: d.name, value: d.values[d.values.length - 1]};
            })
          .attr("type", "button")
          .attr("id", function(d) { return "toggle-" + (d.name).replace(/\s+/g, "-").toLowerCase(); })
          .attr("class", "btn btn-default")
          .text(function(d) { return d.name; });

        // highlight data & button on button click
        toggle
          .on("click", function(d) {
          var tggldLine = "#line-" + (d.name).replace(/\s+/g, "-").replace(/\.+/g, "").toLowerCase(); 
          // determine if active
          var active = this.active ? false : true,
          newColor = active ? function(d) {return color( d.name )} : null,
          lineState = active ? true : false; 
          // color the border & text or don't
          d3.select(this)
            .style("font-weight", active ? "bold" : null)
            .style("border-color", newColor)
            .style("color", newColor);
          // update opacity of line element
          d3.select(tggldLine).classed("toggled", lineState);
          // update element state
          this.active = active;
        })
        .on("mouseover", function(d) {
          var tggldLine = "#line-" + (d.name).replace(/\s+/g, "-").replace(/\.+/g, "").toLowerCase(); 
          var newColor = function(d) {return color( d.name )};
          // color the border & text or don't
          d3.select(this)
            .style("font-weight", "bold")
            .style("border-color", newColor)
            .style("color", newColor);
          // update opacity of line element
          d3.select(tggldLine).classed("toggled", true);
        })
        .on("mouseout", function(d) {
          var tggldLine = "#line-" + (d.name).replace(/\s+/g, "-").replace(/\.+/g, "").toLowerCase(); 
          if (!this.active) {
            d3.select(this)
              .style("font-weight", null)
              .style("border-color", null)
              .style("color", null);
            // update opacity of line element
            d3.select(tggldLine).classed("toggled", false);
          }
        });

        function resize() {
          var width = $(".data-display .chart").width() - margin.left - margin.right;
          x.range([0, width]);
          y.range([height, 0]);
          xAxis.scale(x)
            .orient("bottom").ticks(5);
          yAxis.scale(y)
            .orient("left");

          d3.select(".graph")
            .attr("width", width + margin.left + margin.right);
          svg.select(".x.axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis);
          svg.select(".y.axis")
              .call(yAxis);

          svg.select(".overtime")
            .attr("width", width)
            .attr("height", y(40));

          employee.selectAll(".line")
            .attr("d", function(d) { return line(d.values); })
            .attr("stroke", function(d) { return color(d.name); });

        }

        d3.select(window).on("resize", resize);

        resize();

      });

    </script>
    <div class="data-display-content">
      <p>Advisicon's weekly hourly totals for all work.</p>
    </div>

  </section>

  <section class="text-block">
    <h1>Top level heading</h1>
    <p>A paragraph with a <%= link_to "link", "#" %>.</p>
    <h2>A second level heading</h2>
    <p>Below is a bulleted list.</p>
    <ul>
      <li>An item.</li>
      <li>Another item.</li>
      <li>This is an item too.</li>
    </ul>
    <h3>A third level heading</h3>
    <p>Below is an ordered list.</p>
    <ol>
      <li>First item.</li>
      <li>Next item.</li>
      <li>Last item.</li>
    </ol>
    <h4>A fourth level heading</h4>
    <p>Below is a block of quoted text.</p>
    <blockquote>
      I know kung-fu.
      <footer>
        <cite><a href="https://www.youtube.com/watch?v=6vMO3XmNXe4">Neo</a> in The Matrix</cite>
      </footer>
    </blockquote>
  </section>

</div>
